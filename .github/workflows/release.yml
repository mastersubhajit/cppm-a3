name: Release and Deploy

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Upload to GitHub Releases
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: dist/
    
    # Uncomment the following steps when you're ready to publish to PyPI
    # - name: Publish to Test PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     repository-url: https://test.pypi.org/legacy/
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
    # 
    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}

  create-docker-image:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        RUN pip install --no-cache-dir -e .
        
        EXPOSE 8000
        
        CMD ["python", "-m", "src.cppm_a3"]
        EOF
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max